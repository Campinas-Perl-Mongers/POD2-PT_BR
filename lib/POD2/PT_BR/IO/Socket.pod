=head1 NOME

IO::Socket - Objeto de interface para comunicações utilizando Sockets

=head1 SINOPSE

    use IO::Socket;

=head1 DESCRIÇÃO

C<IO::Socket> provê uma interface para criar e usar sockets. É construído
em cima da interface L<IO::Handle> e herda todos os métodos definidos por
L<IO::Handle>.

C<IO::Socket> somente define métodos para aquelas operações que são comuns
a todos os tipos de sockets. Operações que são específicas de um socket em um
domínio particular tem seus métodos definidos nas sub-classes de C<IO::Socket>.

C<IO::Socket> irá exportar todas as funções (e constantes) definidas por L<Socket>.

=head1 CONSTRUTOR

=over 4

=item new ( [ARGS] )

Cria um C<IO::Socket>, que referencia para uma novo símbolo (veja o pacote C<Symbol>).
C<new> pode ter argumentos, esses argumentos são no formato chave-valor.
C<new> somente procura por uma chave C<Domain> que diz em que domínio o socket vai estar.
Todos os outros argumentos são passados para o método de configuração do pacote para aquele domínio, veja abaixo.

 NOTA NOTA NOTA NOTA NOTA NOTA NOTA NOTA NOTA NOTA NOTA NOTA

Na versão 1.8, todos os objetos IO::Socket tem a propriedade autoflush verdadeira por padrão.
Nas versões antigas, o contrário acontece.

 NOTA NOTA NOTA NOTA NOTA NOTA NOTA NOTA NOTA NOTA NOTA NOTA

=back

=head1 MÉTODOS

Veja L<perlfunc> para ter uma descrição completa de cada um dos métodos C<IO::Socket> suportados, que são simplesmente I<front ends>
para as funções embutidas correspondentes.

    socket
    socketpair
    bind
    listen
    accept
    send
    recv
    peername (getpeername)
    sockname (getsockname)
    shutdown

Alguns métodos tem argumentos diferentes daqueles definidos em L<perlfunc>
numa tentativa de deixar a interface mais flexível. Estes são:

=over 4

=item accept([PKG])

Executa uma I<system call> C<accept> no socket e retorna um novo objeto.
O novo objeto será criado na mesma classe do socket, a menos que C<PKG> seja especificado.
Esse objeto pode ser usado para se comunicar com um cliente que está tentando se conectar.

Em um contexto scalar o novo socket é retornado, ou I<undef> em caso de falha.
Em um contexto de lista, um array de dois elementos é retornado contendo o novo socket e o endereço,
em caso de falha a lista vai estar vazia.

O I<timeout> em [PKG] pode ser especificado como 0 para agir como um I<poll>, mas você não deve fazer isso
porquê um novo objeto IO::Select vai ser  criado por trás das cenas somente para fazer o I<poll>. Isso é terrivelmente ineficiente.
Em vez disso, utilize select() com valor I<timeout> zero no I<handle> ou IO sem bloqueio.

=item socketpair(DOMAIN, TYPE, PROTOCOL)

Chama C<socketpair> e retorna uma lista com dois sockets criados, ou uma lista vazia em caso de erro.

Métodos adicionais:

=item atmark

True if the socket is currently positioned at the urgent data mark, false otherwise.

    use IO::Socket;

    my $sock = IO::Socket::INET->new('some_server');
    $sock->read($data, 1024) until $sock->atmark;

Note: this is a reasonably new addition to the family of socket functions, so all systems may not support this yet. If it is unsupported by the system, an attempt to use this method will abort the program.

The atmark() functionality is also exportable as sockatmark() function:

	use IO::Socket 'sockatmark';

This allows for a more traditional use of sockatmark() as a procedural socket function. If your system does not support sockatmark(), the L<use> declaration will fail at compile time.

=item connected

Se o socket está conectado o endereço é retornado. Se o socket não está conectado, I<undef> é retornado.

=item protocol

Retorna o número do protocolo usado no socket, se for possível saber. Se o protocolo é desconhecido, como um socket AF_UNIX, 0 é retornado.

=item sockdomain

Retorna o número do tipo de domínio do socket. Por exemplo, para um socket AF_INET o valor &AF_INET é retornado.

=item sockopt(OPT [, VAL])

Método unificado para setar e pegar opções em nível SOL_SOCKET. Se chamado com 1 argumento, então getsockopt é chamado, de outra maneira, setsockopt é chamado.

=item socktype

Retorna o número do tipo de socket. Por exemplo, para um socket SOCK_STREAM o valor &SOCK_STREAM é retornado.

=item timeout([VAL])

Seta ou pega o valor I<timeout> associado com este socket. Se chamado sem argumentos, então o estado atual é retornado. Se chamado com argumentos, o estado atual é alterado e o valor anterior é retornado.

=back

=head1 VEJA TAMBÉM

L<Socket>, L<IOHandle>, L<IOSocketINET>, L<IOSocketUNIX> 

=head1 TRADUÇÃO

Nicholas Amorim <nicholasamorim@gmail.com>

=head1 AUTOR

Graham Barr. atmark() por Lincoln Stein. Atualmente mantido por Perl Porters. Por favor reporte todos os bugs para <perl5-porters@perl.org>.

=head1 DIREITOS AUTORAIS

Copyright (c) 1997-8 Graham Barr <gbarr@pobox.com>. Todos os direitos reservados. Este programa é software livre; Você pode redistribuir e/ou modificar estando sujeito aos mesmos termos que Perl está.

A implementação atmark(): Copyright 2001, Lincoln Stein <lstein@cshl.org>. Este módulo é distribuído sob os mesmos termos que o Perl em si. Sinta-se livre para usar, modificar e redistribuir no entanto que se mantenha os créditos corretos.
