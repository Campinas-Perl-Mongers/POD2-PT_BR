=head1 NOME

IO::File - fornece métodos de objeto para manipulação de filehandles

=head1 SINOPSE

    use IO::File;

    $fh = new IO::File;
    if ($fh->open("< file")) {
        print <$fh>;
        $fh->close;
    }

    $fh = new IO::File "> file";
    if (defined $fh) {
        print $fh "bar\n";
        $fh->close;
    }

    $fh = new IO::File "file", "r";
    if (defined $fh) {
        print <$fh>;
        undef $fh;       # fecha o arquivo automaticamente
    }

    $fh = new IO::File "file", O_WRONLY|O_APPEND;
    if (defined $fh) {
        print $fh "corge\n";

        $pos = $fh->getpos;
        $fh->setpos($pos);

        undef $fh;       # fecha o arquivo automaticamente
    }

    autoflush STDOUT 1;

=head1 DESCRIÇÃO

O módulo C<IO::File> é uma extensão de C<IO::Handle> e C<IO::Seekable>. Ele estende estas classes com métodos que são específicos à descritores de arquivos (file handles).

=head1 CONSTRUTOR

=over 4

=item new ( FILENAME [,MODE [,PERMS]] )

Cria um objeto C<IO::File>. Caso ele receba algum parâmetro, eles são passados para o método C<open>. Caso a abertura do arquivo falhe por qualquer razão, o objeto é destruído, caso contrário é retornado para a rotina que o chamou.

=item new_tmpfile

Cria um objeto C<IO::File>, com permissões de leitura e gravação em um novo e recém criado arquivo temporário. Em sistemas onde isto é possível, o arquivo temporário é anônimo (isto é, ele é removido após sua criação, porém mantido aberto). Caso o arquivo temporário não possa ser criado ou aberto, o objeto C<IO::File> é destruído. Caso contrário, é retornado para a rotina que o chamou.

=back

=head1 MÉTODOS

=over 4

=item open( FILENAME [,MODE [,PERMS]] )

=item open( FILENAME, IOLAYERS )

O método C<open> aceita de um até três parâmetros. Com apenas um parâmetro, ele é apenas uma interface para a função C<open>, do Perl. Caso seja chamado com dois ou três parâmetros, o primeiro é o um nome de arquivo, que pode incluir espaços em branco ou qualquer outro caractere especial, e o segundo parâmetro é o modo de abertura, seguido pelo valor da permissão do arquivo, caso seja necessário.

Caso o método C<IO::File::open> receba como parâmetro a string de modo de abertura do Perl (">", "+<", etc.) ou uma string de modo de abertura ANSI C ("w", "r+", etc.), ele utilizará o operador Perl C<open> (protegendo quaisquer caracteres especiais).

Caso o método C<IO::File::open> receba um modo de permissão numérica, o mesmo irá passar o modo e outras opções de permissões para o operador do Perl C<sysopen>. O valor 0666 é utilizado como permissão padrão.

Caso o método C<IO::File::open> receba um modo que inclua o caractere C<:>, ele passará todos os três argumentos para o operador C<open> de três argumentos.

O módulo C<IO::File> exporta as constantes O_XXX do módulo C<Fcntl> caso este módulo esteja disponível.

=item binmode( [LAYER] )

O método C<binmode> aciona o método C<binmode> do objeto C<IO>, como documentado em C<perldoc -f binmode>.

O método C<binmode> aceita um parâmetro opcional, que é a camada a ser passada para a chamada de C<binmode>.

=back

=head1 NOTA

Alguns sistemas operacionais podem executar C<IO::File::new()> ou C<IO::File::open()> em um diretório, sem retornar erro algum. Este comportamento não é portável e não é sugerido. A utilização C<opendir()> e C<readdir()>, ou C<IO::Dir> são recomendadas.

=head1 VEJA TAMBÉM

L<perlfunc>, 
L<perlop/"I/O Operators">,
L<IO::Handle>,
L<IO::Seekable>,
L<IO::Dir>

=head1 HISTÓRIA

Derived from FileHandle.pm by Graham Barr E<lt>F<gbarr@pobox.com>E<gt>.

=head1 TRADUÇÃO

Igor Sutton Lopes <igor@izut.com>

=cut
