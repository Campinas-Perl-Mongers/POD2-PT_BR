=encoding utf8

=head1 NOME

File::Spec::Unix - Especialização do módulo File::Spec para sistemas Unix, base para outros módulos do pacote File::Spec

=head1 SINOPSE

 require File::Spec::Unix; # É executado automaticamente por File::Spec

=head1 DESCRIÇÃO

Oferece métodos para manipulação de especificações de arquivos. Outros módulos do pacote File::Spec, como File::Spec::Mac, estendem o módulo File::Spec::Unix e sobrescrevem métodos específicos.

=head1 MÉTODOS

=over 2

=item canonpath()

Não faz nenhuma verificação física no sistema de arquivos, porém executa uma limpeza lógica em um caminho de arquivos. Sucessivos caracteres C</> e C</.> são eliminados no UNIX.

    $caminho_canonico = File::Spec->canonpath( $caminho ) ;

=item catdir()

Concatena dois ou mais nomes de diretórios para formar um caminho de diretório completo. Este método remove a C</> do final, pois não é bonito, não é necessário e confunde o OS2. Claro que se este for o diretório raiz, a C</> não é removida :-)

=item catfile

Concatena um ou mais nomes de diretórios e um nome de arquivo para formar um caminho de arquivo completo.

=item curdir

Devolve uma representação de uma I<string> contendo o diretório atual, C<.> no UNIX.

=item devnull

Devolve uma representação de uma I<string> contendo o dispositivo nulo, C</dev/null> no UNIX.

=item rootdir

Devolve a representação de uma I<string> contendo o diretório raiz, C</> no UNIX.

=item tmpdir

Devolve a representação de uma I<string> contendo o nome do primeiro diretório com permissão de escrita da lista abaixo ou o diretório atual caso nenhum dos diretórios da lista tenha permissão de escrita:

    $ENV{TMPDIR} /tmp

Desde a versão 5.8.0 do Perl, se você estiver executando utilizando o modo I<taint>, e C<$ENV{TMPDIR}> esteja marcado (I<tainted>), ele não é utilizado.

=item updir

Devolve uma representação de uma I<string> contendo o diretório pai, C<..> no UNIX.

=item no_upwards

Dada uma lista de nomes de arquivos, remove aqueles que se referem ao diretório pai. (Não remove links simbólicos, apenas C<.>, C<..> e equivalentes.)

=item case_tolerant

Devolve um valor verdadeiro ou falso indicando se, respectivamente, a caixa das especificações de nome de arquivo e diretórios são ou não são significantes na comparação destas especificações.

=item file_name_is_absolute

Recebe como argumento um caminho e devolve verdadeiro caso este seja um caminho absoluto.

Esta função não consulta o sistema de arquivos local no UNIX, Win32, OS/2 ou Mac OS (Clássico). Ela consulta o ambiente na plataforma VMS (veja L<File::Spec::VMS/file_name_is_absolut>).

=item path

Não recebe nenhum argumento, e retorna a variável de ambiente C<PATH> como um I<array>.

=item join

A função join é idêntica à catfile.

=item splitpath

  ($volume, $diretorio, $arquivo) = File::Spec->splitpath($caminho); ($volume,
  $diretorio, $arquivo) = File::Spec->splitpath($caminho, $sem_arquivo);

Separa um caminho em porções de volume, diretório e nome de arquivo. Em sistemas sem conceito de volume, devolve uma variável I<scalar> vazia (C<''>) na porção do volume.

Para arquivos sem diferenciação sintática entre nomes de arquivos e diretórios, assume que o último arquivo do C<$caminho> é um caminho a menos que C<$sem_arquivo> seja verdadeiro ou um separador de diretórios ou C</.> ou C</..> esteja presente no final do caminho. No UNIX isto significa que caso a variável C<$sem_arquivo> for verdadeira, esta função devolverá C<('', $path, '')>.

A porção do diretório poderá, ou não, ser devolvida com um C</> no final.

Os resultados podem ser passados para L</catpath()> para recuperar um caminho equivalente (geralmente idêntico) ao caminho original.

=item splitdir

O oposto de L</catdir()>.)>.

    @diretorios = File::Spec->splitdir( $diretorios );

A variável C<$diretorios> deve ser a porção do diretório do caminho em sistemas que possuem conceito de volume ou tenham uma sintaxe de caminhos que diferencie arquivos de diretórios.

Diferente de apenas dividir os diretórios no separador, nomes de diretório vazio (C<''>) podem ser devolvidos, porque este valor é significante em alguns sistemas operacionais.

No UNIX,

    File::Spec->splitdir( "/a/b//c/" );

Devolve:

    ( '', 'a', 'b', '', 'c', '' )

=item catpath()

Recebe como parâmetros um volume, um diretório e um arquivo e devolvem um caminho completo. No UNIX, o parâmetro volume é ignorado, e o diretório e arquivo são concatenados. Uma barra pode ser inserida caso seja necessário (apesar de que se o diretório informado não começar com uma barra, ela não será adicionado). Em outros sistemas operacionais, o volume é significante.

=item abs2rel

Recebe um caminho destino e um caminho base opcional, e devolve o caminho relativo a partir do caminho base até o diretório destino:

  $caminho_relativo = File::Spec->abs2rel($caminho); $caminho_relativo =
  File::Spec->abs2rel($caminho, $caminho_base);

Caso C<$caminho_base> não esteja presente ou esteja vazio (C<''>), então L<cwd()|Cwd> é utilizado. Caso o C<$caminho_base> seja relativo, ele é convertido para um caminho absoluto utilizando L</rel2abs()>. Isto significa que ele é obtido relativo a L<cwd()|Cwd>.

Em sistemas que possuem uma gramática que identifica nomes de arquivos, a função ignora C<$caminho_base> caso este represente um nome de arquivo. Caso contrário, todos os caminhos são tratados como diretórios.

Caso C<$caminho> seja um caminho relativo, ele é convertido para um caminho absoluto utilizando L</rel2abs()>. Isto significa que ele é obtido relativo à L<cwd()|Cwd>.

Nenhuma verificação no sistema de arquivos é feita. No VMS, há uma interação com o ambiente de trabalho. (N.T.: Não achei uma tradução que eu compreendesse, já que não conheço VMS: I<On VMS, there is interaction with the working environment, as logicals and macros are expanded.>)

Este código foi baseado no código escrito por Shigio Yamaguchi.

=item rel2abs()

Converte um caminho relativo em um caminho absoluto.

  $caminho_absoluto = File::Spec->rel2abs( $caminho ) ; $caminho_absoluto =
  File::Spec->rel2abs( $caminho, $caminho_base ) ;

Se C<$caminho_base> não esteja presente ou esteja vazia (C<''>), então L<cwd()|Cwd> é usado. Caso C<$caminho_base> seja relativo, então ele é convertido em um caminho absoluto utilizando L</rel2abs()>. Isto significa que ele é obtido relativo à L<cwd()|Cwd>.

Em sistemas que possuem uma gramática que identifica nomes de arquivos, a função ignora C<$caminho_base> caso este represente um nome de arquivo. Caso contrário, todos os caminhos são tratados como diretórios.

Se C<$caminho> é um caminho absoluto, ele é limpo e devolvido utilizando L</canonpath()>.

Nenhuma verificação no sistema de arquivos é feita. No VMS, há uma interação com o ambiente de trabalho. (N.T.: Não achei uma tradução que eu compreendesse, já que não conheço VMS: I<On VMS, there is interaction with the working environment, as logicals and macros are expanded.>)

Este código foi baseado no código escrito por Shigio Yamaguchi.

=back

=head1 COPYRIGHT

Copyright (c) 2004 by the Perl 5 Porters.  All rights reserved.

This program is free software; you can redistribute it and/or modify it under the same terms as Perl itself.

=head1 VEJA TAMBÉM

L<File::Spec>

=head1 TRADUÇÃO

Igor Sutton <igor@izut.com>

=cut
